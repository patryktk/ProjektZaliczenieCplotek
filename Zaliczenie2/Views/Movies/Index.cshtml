@model IEnumerable<MvcMovie.Models.Movie>

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>
<input type="text" id="searchInput" oninput="searchTable()" placeholder="Szukaj po nazwie">

<table class="table" id="myTable">
    <thead>
        <tr>
            <th onclick="sortTable(0)">
                @Html.DisplayNameFor(model => model.Title)
            </th>
            <th onclick="sortTable(1)">
                @Html.DisplayNameFor(model => model.ReleaseDate)
            </th>
            <th onclick="sortTable(2)">
                @Html.DisplayNameFor(model => model.Genre)
            </th>
            <th onclick="sortTable(3)">
                @Html.DisplayNameFor(model => model.Price)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Title)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ReleaseDate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Genre)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Price)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>
<script>
    function searchTable() {
        var input, filter, table, tr, td, i, txtValue;
        input = document.getElementById("searchInput");
        filter = input.value.toUpperCase();
        table = document.getElementById("myTable");
        tr = table.getElementsByTagName("tr");

        for (i = 0; i < tr.length; i++) {
            td = tr[i].getElementsByTagName("td")[0]; // Zakładamy, że wyszukiwane jest tylko w pierwszej kolumnie
            if (td) {
                txtValue = td.textContent || td.innerText;
                if (txtValue.toUpperCase().indexOf(filter) > -1) {
                    tr[i].style.display = "";
                } else {
                    tr[i].style.display = "none";
                }
            }
        }
    }
    var currentColumn = -1;
    var isAscending = true;

    function sortTable(columnIndex) {
        var table, rows, switching, i, x, y, shouldSwitch;
        table = document.getElementById("myTable");
        switching = true;

        while (switching) {
            switching = false;
            rows = table.rows;

            for (i = 1; i < (rows.length - 1); i++) {
                shouldSwitch = false;
                x = rows[i].getElementsByTagName("td")[columnIndex];
                y = rows[i + 1].getElementsByTagName("td")[columnIndex];

                var xValue = x.innerHTML.toLowerCase();
                var yValue = y.innerHTML.toLowerCase();

                if (isAscending) {
                    if (xValue > yValue) {
                        shouldSwitch = true;
                        break;
                    }
                } else {
                    if (xValue < yValue) {
                        shouldSwitch = true;
                        break;
                    }
                }
            }

            if (shouldSwitch) {
                rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                switching = true;
            }
        }

        if (currentColumn === columnIndex) {
            isAscending = !isAscending;
        } else {
            isAscending = true;
        }

        currentColumn = columnIndex;
    }
</script>